@page "/recipes"
@inject IJSRuntime JS

@using System.Globalization

@code {
    private bool isGrid = true;
    private bool isTable = false; // table view toggle
    private Recipe? SelectedRecipe = null;
    private bool showMetric = false;
    private bool isAdding = false;
    private string newTitle = "";
    private string newImageUrl = "";
    private string newDescription = "";
    private string newPrepTime = "";
    private List<Ingredient> newIngredients = new() { new Ingredient() };
    private List<string> newSteps = new() { "" };
    private string addError = "";
    private bool isIngredientsGrid = false; // for toggle between list/grid view

    // FIX: Make AmountUS and AmountMetric nullable for safe number binding
    class Ingredient
    {
        public string Name { get; set; } = "";
        public double? AmountUS { get; set; }   // must be nullable
        public string UnitUS { get; set; } = "";
        public double? AmountMetric { get; set; }   // must be nullable
        public string UnitMetric { get; set; } = "";
    }

    class Recipe
    {
        public string Title { get; set; } = "";
        public string ImageUrl { get; set; } = "";
        public string Description { get; set; } = "";
        public int PrepTimeMinutes { get; set; }
        public List<Ingredient> Ingredients { get; set; } = new();
        public List<string> Steps { get; set; } = new();
    }

    @code {

        // ... other code ...
        // Remove this line:
        // private List<Ingredient> newingredients = new() { new Ingredient() };

        // Use this:
       

        // ... rest of your code, all references should be newIngredients ...

    }
    private List<Recipe> Recipes = new()
    {
        new Recipe {
            Title = "Classic French Toast",
            ImageUrl = "https://th.bing.com/th/id/OIP.aaJQ8lYs_BlwDMrrqJWEBAHaEK?w=203&h=114&c=7&r=0&o=7&cb=iwp2&pid=1.7&rm=3",
            Description = "Golden, fluffy French toast with a hint of vanilla.",
            PrepTimeMinutes = 15,
            Ingredients = new List<Ingredient>
            {
                new Ingredient { Name = "Eggs", AmountUS = 2, UnitUS = "large", AmountMetric = 2, UnitMetric = "large" },
                new Ingredient { Name = "Milk", AmountUS = 0.5, UnitUS = "cup", AmountMetric = 120, UnitMetric = "ml" },
                new Ingredient { Name = "Bread Slices", AmountUS = 4, UnitUS = "slices", AmountMetric = 4, UnitMetric = "slices" },
                new Ingredient { Name = "Butter", AmountUS = 1, UnitUS = "tbsp", AmountMetric = 15, UnitMetric = "g" },
                new Ingredient { Name = "Vanilla Extract", AmountUS = 1, UnitUS = "tsp", AmountMetric = 5, UnitMetric = "ml" }
            },
            Steps = new List<string>
            {
                "Whisk eggs, milk, and vanilla together in a bowl.",
                "Heat butter in a skillet over medium heat.",
                "Dip bread slices in egg mixture, coating both sides.",
                "Cook bread in skillet until golden brown on both sides.",
                "Serve warm with syrup or fruit."
            }
        },
        new Recipe {
            Title = "Caesar Salad",
            ImageUrl = "https://th.bing.com/th/id/OSK.63308c0ef1c6816689f20e360e513e44?w=220&h=146&rs=2&qlt=80&o=6&cdv=1&pid=16.1",
            Description = "Crisp romaine lettuce with creamy Caesar dressing and crunchy croutons.",
            PrepTimeMinutes = 10,
            Ingredients = new List<Ingredient>
            {
                new Ingredient { Name = "Romaine Lettuce", AmountUS = 6, UnitUS = "cups", AmountMetric = 150, UnitMetric = "g" },
                new Ingredient { Name = "Croutons", AmountUS = 1, UnitUS = "cup", AmountMetric = 40, UnitMetric = "g" },
                new Ingredient { Name = "Caesar Dressing", AmountUS = 0.25, UnitUS = "cup", AmountMetric = 60, UnitMetric = "ml" },
                new Ingredient { Name = "Parmesan Cheese", AmountUS = 0.25, UnitUS = "cup", AmountMetric = 20, UnitMetric = "g" }
            },
            Steps = new List<string>
            {
                "Wash and dry the romaine lettuce, then chop.",
                "In a large bowl, toss lettuce with dressing.",
                "Add croutons and parmesan cheese, toss again.",
                "Serve immediately."
            }
        },
        new Recipe {
            Title = "Chicken Curry",
            ImageUrl = "https://th.bing.com/th/id/OIP.lyaKc0kPBW0KHiLKzM-ANQHaHa?w=200&h=200&c=10&o=6&pid=genserp&rm=2",
            Description = "Aromatic and flavorful chicken curry with rich spices.",
            PrepTimeMinutes = 25,
            Ingredients = new List<Ingredient>
            {
                new Ingredient { Name = "Chicken Breast", AmountUS = 1, UnitUS = "lb", AmountMetric = 450, UnitMetric = "g" },
                new Ingredient { Name = "Onion", AmountUS = 1, UnitUS = "medium", AmountMetric = 1, UnitMetric = "medium" },
                new Ingredient { Name = "Garlic", AmountUS = 2, UnitUS = "cloves", AmountMetric = 2, UnitMetric = "cloves" },
                new Ingredient { Name = "Curry Powder", AmountUS = 2, UnitUS = "tbsp", AmountMetric = 16, UnitMetric = "g" },
                new Ingredient { Name = "Coconut Milk", AmountUS = 1, UnitUS = "cup", AmountMetric = 240, UnitMetric = "ml" }
            },
            Steps = new List<string>
            {
                "Cut chicken into bite-sized pieces.",
                "Sauté onion and garlic until translucent.",
                "Add chicken and cook until browned.",
                "Stir in curry powder, then pour in coconut milk.",
                "Simmer until chicken is cooked and sauce thickens."
            }
        },
                new Recipe {
            Title = "Laing (Spicy Taro Leaves in Coconut Milk)",
            ImageUrl = "https://th.bing.com/th/id/OIP.gm-XzT94DXmuOSjFfntLZAHaGG?w=208&h=180&c=7&r=0&o=5&pid=1.7",
            Description = "A classic Filipino dish made with dried taro leaves, coconut milk, and chilies—creamy, spicy, and aromatic.",
            PrepTimeMinutes = 30,
            Ingredients = new List<Ingredient>
            {
                new Ingredient { Name = "Dried Taro Leaves", AmountUS = 2, UnitUS = "cups", AmountMetric = 40, UnitMetric = "g" },
                new Ingredient { Name = "Pork Belly (optional)", AmountUS = 0.5, UnitUS = "lb", AmountMetric = 225, UnitMetric = "g" },
                new Ingredient { Name = "Onion", AmountUS = 1, UnitUS = "medium", AmountMetric = 1, UnitMetric = "medium" },
                new Ingredient { Name = "Garlic", AmountUS = 3, UnitUS = "cloves", AmountMetric = 3, UnitMetric = "cloves" },
                new Ingredient { Name = "Ginger", AmountUS = 1, UnitUS = "tbsp", AmountMetric = 10, UnitMetric = "g" },
                new Ingredient { Name = "Red Chili Peppers", AmountUS = 2, UnitUS = "pieces", AmountMetric = 2, UnitMetric = "pieces" },
                new Ingredient { Name = "Coconut Milk", AmountUS = 2, UnitUS = "cups", AmountMetric = 480, UnitMetric = "ml" },
                new Ingredient { Name = "Coconut Cream", AmountUS = 1, UnitUS = "cup", AmountMetric = 240, UnitMetric = "ml" },
                new Ingredient { Name = "Shrimp Paste (Bagoong)", AmountUS = 1, UnitUS = "tbsp", AmountMetric = 15, UnitMetric = "g" }
            },
            Steps = new List<string>
            {
                "Sauté onion, garlic, and ginger until fragrant.",
                "Add pork belly and cook until lightly browned (skip if vegetarian).",
                "Add shrimp paste and chili peppers, stir well.",
                "Pour in coconut milk and bring to a gentle simmer.",
                "Add dried taro leaves on top—do not stir. Let them absorb the coconut milk.",
                "Simmer uncovered until leaves are soft and most liquid is absorbed (about 20 minutes).",
                "Pour in coconut cream, simmer for 5 more minutes until creamy and flavorful.",
                "Serve with steamed rice."
            }
        },
                new Recipe {
            Title = "Kare Kare (Filipino Peanut Stew)",
            ImageUrl = "https://th.bing.com/th/id/OIP.7AUIinM72vg-aZ6FTrJxCQHaHQ?rs=1&pid=ImgDetMain",
            Description = "A rich and savory Filipino stew made with oxtail, vegetables, and a creamy peanut sauce. Traditionally served with bagoong (shrimp paste) on the side.",
            PrepTimeMinutes = 40,
            Ingredients = new List<Ingredient>
            {
                new Ingredient { Name = "Oxtail", AmountUS = 2, UnitUS = "lb", AmountMetric = 900, UnitMetric = "g" },
                new Ingredient { Name = "Tripe (optional)", AmountUS = 0.5, UnitUS = "lb", AmountMetric = 225, UnitMetric = "g" },
                new Ingredient { Name = "Eggplant", AmountUS = 2, UnitUS = "medium", AmountMetric = 2, UnitMetric = "medium" },
                new Ingredient { Name = "String Beans", AmountUS = 1, UnitUS = "bunch", AmountMetric = 200, UnitMetric = "g" },
                new Ingredient { Name = "Banana Blossom", AmountUS = 1, UnitUS = "piece", AmountMetric = 1, UnitMetric = "piece" },
                new Ingredient { Name = "Peanut Butter", AmountUS = 1, UnitUS = "cup", AmountMetric = 240, UnitMetric = "g" },
                new Ingredient { Name = "Ground Toasted Rice", AmountUS = 3, UnitUS = "tbsp", AmountMetric = 24, UnitMetric = "g" },
                new Ingredient { Name = "Garlic", AmountUS = 4, UnitUS = "cloves", AmountMetric = 4, UnitMetric = "cloves" },
                new Ingredient { Name = "Onion", AmountUS = 1, UnitUS = "large", AmountMetric = 1, UnitMetric = "large" },
                new Ingredient { Name = "Annatto Seeds (Atsuete)", AmountUS = 2, UnitUS = "tbsp", AmountMetric = 16, UnitMetric = "g" },
                new Ingredient { Name = "Water", AmountUS = 6, UnitUS = "cups", AmountMetric = 1.5, UnitMetric = "liters" },
                new Ingredient { Name = "Shrimp Paste (Bagoong)", AmountUS = 3, UnitUS = "tbsp", AmountMetric = 45, UnitMetric = "g" }
            },
            Steps = new List<string>
            {
                "Boil oxtail (and tripe, if using) in water until tender. Set aside and keep the broth.",
                "Sauté garlic and onion in a large pot.",
                "Add cooked oxtail and tripe to the pot.",
                "Pour in the reserved broth. Add peanut butter and ground toasted rice. Stir until well combined.",
                "Add annatto water (soaked and strained annatto seeds in warm water) for color.",
                "Simmer and add vegetables: eggplant, string beans, and banana blossom. Cook until tender.",
                "Season with salt and pepper. Serve hot with bagoong on the side and steamed rice."
            }
        }

            };


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try { await JS.InvokeVoidAsync("themeManager.applyStoredTheme"); }
            catch { }
        }
    }

    private void ShowRecipe(Recipe recipe)
    {
        SelectedRecipe = recipe;
        showMetric = false;
    }

    private void CloseRecipe()
    {
        SelectedRecipe = null;
    }

    private string FormatAmount(double? amount)
    {
        if (amount == null) return "";
        if (amount % 1 == 0)
        {
            return ((int)amount).ToString(CultureInfo.InvariantCulture);
        }
        return amount.Value.ToString(CultureInfo.InvariantCulture);
    }

    // Add Recipe Functions
    private void ShowAddRecipe()
    {
        isAdding = true;
        addError = "";
        newTitle = "";
        newImageUrl = "";
        newDescription = "";
        newPrepTime = "";
        newIngredients = new() { new Ingredient() };
        newSteps = new() { "" };
    }

    private void AddIngredient()
    {
        newIngredients.Add(new Ingredient());
    }

    private void RemoveIngredient(int index)
    {
        if (newIngredients.Count > 1 && index >= 0 && index < newIngredients.Count)
            newIngredients.RemoveAt(index);
    }

    private void AddStep()
    {
        newSteps.Add("");
    }

    private void RemoveStep(int index)
    {
        if (newSteps.Count > 1 && index >= 0 && index < newSteps.Count)
            newSteps.RemoveAt(index);
    }

    private void CancelAddRecipe()
    {
        isAdding = false;
    }

        private void SaveRecipe()
        {
    addError = "";

    // Trim and validate input fields
    string title = (newTitle ?? "").Trim();
    string description = (newDescription ?? "").Trim();
    string imageUrl = (newImageUrl ?? "").Trim();
    string prepTimeStr = (newPrepTime ?? "").Trim();

    if (string.IsNullOrWhiteSpace(title) || string.IsNullOrWhiteSpace(description) || string.IsNullOrWhiteSpace(prepTimeStr))
    {
        addError = "Please fill in all required fields (Title, Description, and Prep Time).";
        return;
    }

    if (!int.TryParse(prepTimeStr, out int prepTime) || prepTime < 0)
    {
        addError = "Prep time must be a valid positive number.";
        return;
    }

    // Clean up ingredients
    var cleanedIngredients = newIngredients
        .Where(i => !string.IsNullOrWhiteSpace(i.Name)
                 && i.AmountUS != null && !string.IsNullOrWhiteSpace(i.UnitUS)
                 && i.AmountMetric != null && !string.IsNullOrWhiteSpace(i.UnitMetric))
        .Select(i => new Ingredient
                {
                    Name = i.Name.Trim(),
                    AmountUS = i.AmountUS,
                    UnitUS = i.UnitUS.Trim(),
                    AmountMetric = i.AmountMetric,
                    UnitMetric = i.UnitMetric.Trim()
                })
        .ToList();

    if (cleanedIngredients.Count == 0)
    {
        addError = "Please add at least one complete ingredient (Name, US/Metric amount and unit).";
        return;
    }

    // Clean up steps
    var cleanedSteps = newSteps
        .Select(s => s.Trim())
        .Where(s => !string.IsNullOrWhiteSpace(s))
        .ToList();

    if (cleanedSteps.Count == 0)
    {
        addError = "Please add at least one instruction step.";
        return;
    }

    // Use default image if empty
    if (string.IsNullOrWhiteSpace(imageUrl))
    {
        imageUrl = "https://images.unsplash.com/photo-1464306076886-debca5e8a6b0?auto=format&fit=crop&w=400&q=80";
    }

    var newRecipe = new Recipe
            {
                Title = title,
                ImageUrl = imageUrl,
                Description = description,
                PrepTimeMinutes = prepTime,
                Ingredients = cleanedIngredients,
                Steps = cleanedSteps
            };

    Recipes.Add(newRecipe);

    // Reset form
    isAdding = false;
    newTitle = "";
    newImageUrl = "";
    newDescription = "";
    newPrepTime = "";
    newIngredients = new() { new Ingredient() };
    newSteps = new() { "" };
    addError = "";
        }
    // Function to switch to table view
    private void ShowTableView() { isTable = true; isGrid = false; }
    private void ShowGridView() { isGrid = true; isTable = false; }

    // Toggle between list/table and grid for ingredients in detail view
    private void ToggleIngredientsView()
    {
        isIngredientsGrid = !isIngredientsGrid;
    }


    // Function to render recipes as a table
    private RenderFragment RenderRecipeTable() => builder =>
    {
        int seq = 0;
        builder.OpenElement(seq++, "div");
        builder.AddAttribute(seq++, "class", "table-responsive");
        builder.OpenElement(seq++, "table");
        builder.AddAttribute(seq++, "class", "table table-striped table-bordered align-middle");
        builder.OpenElement(seq++, "thead");
        builder.OpenElement(seq++, "tr");
        builder.OpenElement(seq++, "th"); builder.AddContent(seq++, "Image"); builder.CloseElement();
        builder.OpenElement(seq++, "th"); builder.AddContent(seq++, "Title"); builder.CloseElement();
        builder.OpenElement(seq++, "th"); builder.AddContent(seq++, "Description"); builder.CloseElement();
        builder.OpenElement(seq++, "th"); builder.AddContent(seq++, "Prep Time"); builder.CloseElement();
        builder.OpenElement(seq++, "th"); builder.AddContent(seq++, "Ingredients"); builder.CloseElement();
        builder.OpenElement(seq++, "th"); builder.AddContent(seq++, "View"); builder.CloseElement();
        builder.CloseElement(); // tr
        builder.CloseElement(); // thead

        builder.OpenElement(seq++, "tbody");
        foreach (var recipe in Recipes)
        {
            builder.OpenElement(seq++, "tr");
            // Image
            builder.OpenElement(seq++, "td");
            builder.OpenElement(seq++, "img");
            builder.AddAttribute(seq++, "src", recipe.ImageUrl);
            builder.AddAttribute(seq++, "alt", recipe.Title);
            builder.AddAttribute(seq++, "style", "width:80px; height:60px; object-fit:cover; border-radius:0.5rem;");
            builder.CloseElement(); // img
            builder.CloseElement(); // td
                                    // Title
            builder.OpenElement(seq++, "td");
            builder.AddContent(seq++, recipe.Title);
            builder.CloseElement();
            // Description
            builder.OpenElement(seq++, "td");
            builder.AddContent(seq++, recipe.Description);
            builder.CloseElement();
            // Prep Time
            builder.OpenElement(seq++, "td");
            builder.AddContent(seq++, recipe.PrepTimeMinutes + " min");
            builder.CloseElement();
            // Ingredients
            builder.OpenElement(seq++, "td");
            builder.OpenElement(seq++, "ul");
            foreach (var ing in recipe.Ingredients)
            {
                builder.OpenElement(seq++, "li");
                builder.AddContent(seq++, showMetric
                    ? $"{FormatAmount(ing.AmountMetric)} {ing.UnitMetric} {ing.Name}"
                    : $"{FormatAmount(ing.AmountUS)} {ing.UnitUS} {ing.Name}");
                builder.CloseElement(); // li
            }
            builder.CloseElement(); // ul
            builder.CloseElement(); // td
                                    // View
            builder.OpenElement(seq++, "td");
            builder.OpenElement(seq++, "button");
            builder.AddAttribute(seq++, "class", "btn btn-sm btn-warning");
            builder.AddAttribute(seq++, "type", "button");
            builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create<MouseEventArgs>(this, () => ShowRecipe(recipe)));
            builder.AddContent(seq++, "View");
            builder.CloseElement(); // button
            builder.CloseElement(); // td
            builder.CloseElement(); // tr
        }
        builder.CloseElement(); // tbody
        builder.CloseElement(); // table
        builder.CloseElement(); // div
    };
}

<div class="min-vh-100" style="background: linear-gradient(135deg, #f5d365 0%, #ff9a9e 100%); padding: 40px 0;">
    <div class="container">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2 class="fw-bold" style="color: #f37335;">
                <i class="fas fa-utensils"></i> Recipes
            </h2>
            <div>
                <button class="btn btn-outline-warning me-2 @((isGrid && !isTable ? "active" : ""))"
                        style="color: #f37335; border-color: #f37335;" @onclick="ShowGridView">
                    <i class="fas fa-th"></i>
                </button>
                <button class="btn btn-outline-warning me-2 @((isTable ? "active" : ""))"
                        style="color: #f37335; border-color: #f37335;" @onclick="ShowTableView">
                    <i class="fas fa-table"></i>
                </button>
                <button class="btn btn-warning ms-3" style="background:linear-gradient(90deg, #ff9966 0%, #ff5e62 100%); color:white; border:none;"
                        @onclick="ShowAddRecipe">
                    <i class="fas fa-plus"></i> Add Recipe
                </button>
            </div>
        </div>

        @if (isAdding)
        {
            <div class="add-recipe-card">
                <h4 class="add-recipe-title"><i class="fas fa-plus-circle"></i> Add New Recipe</h4>
                @if (!string.IsNullOrEmpty(addError))
                {
                    <div class="alert alert-danger">@addError</div>
                }
                <div class="mb-3">
                    <label class="add-recipe-label form-label">Title *</label>
                    <input class="form-control" @bind="newTitle" maxlength="50" />
                </div>
                <div class="mb-3">
                    <label class="add-recipe-label form-label">Image URL</label>
                    <input class="form-control" @bind="newImageUrl" />
                </div>
                <div class="mb-3">
                    <label class="add-recipe-label form-label">Description *</label>
                    <textarea class="form-control" @bind="newDescription" maxlength="200"></textarea>
                </div>
                <div class="mb-3">
                    <label class="add-recipe-label form-label">Prep Time (minutes) *</label>
                    <input class="form-control" @bind="newPrepTime" type="number" min="1" />
                </div>
                <div class="mb-3">
                    <label class="add-recipe-label form-label">Ingredients</label>
                    @for (var i = 0; i < newIngredients.Count; i++)
                    {
                        <div class="add-recipe-ing-row">
                            <input class="form-control" type="number" min="0.01" step="any" style="width: 70px"
                                   placeholder="US Amt" @bind-value="newIngredients[i].AmountUS" @bind-value:event="oninput" />
                            <input class="form-control" style="width: 80px"
                                   placeholder="US Unit" @bind="newIngredients[i].UnitUS" />
                            <input class="form-control" type="number" min="0.01" step="any" style="width: 70px"
                                   placeholder="Metric Amt" @bind-value="newIngredients[i].AmountMetric" @bind-value:event="oninput" />
                            <input class="form-control" style="width: 80px"
                                   placeholder="Metric Unit" @bind="newIngredients[i].UnitMetric" />
                            <input class="form-control flex-fill"
                                   placeholder="Ingredient Name" @bind="newIngredients[i].Name" />
                            @if (newIngredients.Count > 1)
                            {
                                <button class="btn btn-sm btn-outline-danger" type="button" title="Remove" @onclick="() => RemoveIngredient(i)">
                                    <i class="fas fa-minus-circle"></i>
                                </button>
                            }
                        </div>
                    }
                    <button class="add-recipe-btn-outline btn btn-sm mt-1" type="button" @onclick="AddIngredient">
                        <i class="fas fa-plus"></i> Add Ingredient
                    </button>
                </div>
                <div class="mb-3">
                    <label class="add-recipe-label form-label">Steps *</label>
                    @for (var i = 0; i < newSteps.Count; i++)
                    {
                        <div class="add-recipe-step-row">
                            <span class="fw-bold text-secondary">@($"{i + 1}.")</span>
                            <input class="form-control flex-fill" placeholder="Instruction step" @bind="newSteps[i]" maxlength="200" />
                            @if (newSteps.Count > 1)
                            {
                                <button class="btn btn-sm btn-outline-danger" type="button" title="Remove" @onclick="() => RemoveStep(i)">
                                    <i class="fas fa-minus-circle"></i>
                                </button>
                            }
                        </div>
                    }
                    <button class="add-recipe-btn-outline btn btn-sm mt-1" type="button" @onclick="AddStep">
                        <i class="fas fa-plus"></i> Add Step
                    </button>
                </div>
                <div class="mt-4 d-flex justify-content-end">
                    <button class="add-recipe-btn-outline btn me-2" type="button" @onclick="CancelAddRecipe">Cancel</button>
                    <button class="add-recipe-btn-main btn" type="button" @onclick="SaveRecipe">Save</button>
                </div>
            </div>
        }
        else if (SelectedRecipe == null)
        {
            @if (isTable)
            {
                @RenderRecipeTable()
            }
            else
            {
                <div class="row g-4">
                    @foreach (var recipe in Recipes)
                    {
                        <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                            <div class="card shadow-sm border-0 h-100" style="background: rgba(255,255,255,0.93); border-radius: 1.25rem;">
                                <img src="@recipe.ImageUrl" class="card-img-top" style="border-top-left-radius: 1.25rem; border-top-right-radius: 1.25rem; height:170px; object-fit:cover; cursor:pointer;" @onclick="() => ShowRecipe(recipe)">
                                <div class="card-body d-flex flex-column" style="cursor:pointer;" @onclick="() => ShowRecipe(recipe)">
                                    <h5 class="card-title fw-bold" style="color: #f37335;">@recipe.Title</h5>
                                    <div class="mb-2">
                                        <span class="badge" style="background:linear-gradient(90deg, #ff9966 0%, #ff5e62 100%); color:white;">
                                            <i class="far fa-clock"></i> Prep: @recipe.PrepTimeMinutes min
                                        </span>
                                    </div>
                                    <p class="card-text text-muted flex-grow-1">@recipe.Description</p>
                                    <span class="btn btn-warning mt-3" style="background:linear-gradient(90deg, #ff9966 0%, #ff5e62 100%); color:white; border:none; pointer-events:none;">
                                        View Recipe
                                    </span>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <div class="card shadow-lg border-0" style="max-width: 600px; margin: 0 auto; background: rgba(255,255,255,0.97); border-radius: 1.5rem;">
                <img src="@SelectedRecipe.ImageUrl" class="card-img-top" style="border-top-left-radius: 1.5rem; border-top-right-radius: 1.5rem; height:220px; object-fit:cover;">
                <div class="card-body">
                    <h3 class="fw-bold mb-2" style="color:#f37335">@SelectedRecipe.Title</h3>
                    <p class="mb-2 text-muted">@SelectedRecipe.Description</p>
                    <div class="mb-3">
                        <span class="badge" style="background:linear-gradient(90deg, #ff9966 0%, #ff5e62 100%); color:white;">
                            <i class="far fa-clock"></i> Prep Time: @SelectedRecipe.PrepTimeMinutes min
                        </span>
                    </div>
                    <div class="mb-3 d-flex justify-content-between align-items-center">
                        <h5 class="fw-semibold mb-0" style="color:#f37335">Ingredients</h5>
                        <div>
                            <button class="btn btn-sm btn-outline-warning me-2" style="color: #f37335; border-color: #f37335;" @onclick="() => showMetric = !showMetric">
                                @if (showMetric)
                                {
                                    <span><i class="fas fa-balance-scale-left"></i> US Units</span>
                                }
                                else
                                {
                                    <span><i class="fas fa-balance-scale-right"></i> Metric</span>
                                }
                            </button>
                            <button class="btn btn-sm btn-outline-warning" style="color: #f37335; border-color: #f37335;" @onclick="ToggleIngredientsView">
                                @if (isIngredientsGrid)
                                {
                                    <span><i class="fas fa-list"></i> List</span>
                                }
                                else
                                {
                                    <span><i class="fas fa-th"></i> Grid</span>
                                }
                            </button>
                        </div>
                    </div>
                    @if (isIngredientsGrid)
                    {
                        <div class="row row-cols-2 g-2 mb-3">
                            @foreach (var ingredient in SelectedRecipe.Ingredients)
                            {
                                <div class="col">
                                    <div class="border rounded p-2 h-100" style="background: #fffbe7;">
                                        <div class="fw-bold" style="color: #f37335;">
                                            @if (showMetric)
                                            {
                                                @($"{FormatAmount(ingredient.AmountMetric)} {ingredient.UnitMetric}")
                                            }
                                            else
                                            {
                                                @($"{FormatAmount(ingredient.AmountUS)} {ingredient.UnitUS}")
                                            }
                                        </div>
                                        <div>@ingredient.Name</div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <table class="table table-bordered mb-3">
                            <thead>
                                <tr>
                                    <th>Amount</th>
                                    <th>Unit</th>
                                    <th>Name</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var ingredient in SelectedRecipe.Ingredients)
                                {
                                    <tr>
                                        @if (showMetric)
                                        {
                                            <td>@FormatAmount(ingredient.AmountMetric)</td>
                                            <td>@ingredient.UnitMetric</td>
                                        }
                                        else
                                        {
                                            <td>@FormatAmount(ingredient.AmountUS)</td>
                                            <td>@ingredient.UnitUS</td>
                                        }
                                        <td>@ingredient.Name</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }

                    <h5 class="fw-semibold mb-2 mt-4" style="color:#f37335">Instructions</h5>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th style="width: 40px;">#</th>
                                <th>Instruction</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < SelectedRecipe.Steps.Count; i++)
                            {
                                <tr>
                                    <td>@(i + 1)</td>
                                    <td>@SelectedRecipe.Steps[i]</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <button class="btn btn-warning" style="background:linear-gradient(90deg, #ff9966 0%, #ff5e62 100%); color:white; border:none;" @onclick="CloseRecipe">
                        <i class="fas fa-arrow-left"></i> Back to Recipes
                    </button>
                </div>
            </div>
        }
    </div> <!-- closes .container -->
</div>    <!-- closes .min-vh-100 -->